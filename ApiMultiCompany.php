<?php

$prueba = new ApiMultiCompany();
for ($i=0; $i < 1000; $i++) { 
    //$prueba->login();
    //$prueba->get_all_data_company('creditechcorp.crm.c786');
    echo $i; 
}


class ApiMultiCompany
{

    protected $username = ''; // User of the Multi Company application
    protected $password = ''; // Password of the Multi Company application
    protected $serverUrl = ''; // Domain of the application
    protected $msgErrorAccessToken = 'Invalid Access Token'; // Error message in case the token is incorrect
    protected $msgErrorConnectAPI = 'Invalid Connection to the API'; // Error message in case the connection to the API fails
    protected $msgErrorCredentialsIncorrect = 'The provided credentials are incorrect.'; // Error message in case the user's credentials are incorrect
    protected $msgDataNotFound = 'The data is not found'; // Error message in case no company name or module is found
    protected $msgLogoutTokenUser = 'The token was successfully removed'; // Message when the user's token is removed


    // Log in to the API with the username and password of the application
    public function login(){
        $post = array('email' => $this->username, 'password' => $this->password);
        $post = json_encode($post);
        $options = $this->option_post($post);
        $url = $this->serverUrl.'api/login';
        $result = $this->connect_api($url, $options);
        $result = json_decode($result);
        if(isset($result->message) && $result->message){
            setcookie("accessToken", $result->token, time() + 5*60);  // Access Token generated by the API after authentication to access its endpoints
        }else{
            $result = $this->msgErrorCredentialsIncorrect;
        }
        return $result;
    }

    // Get all data of a company by passing the company name to search for, using the authentication token. This token expires after a certain time.
    public function get_all_data_company($url_name)
    {
       if(isset($_COOKIE["accessToken"])){

            $name = explode(".", $url_name);
            $name = explode("://", $name[0]);
            $name = $name[1];

            $options = $this->option_get_authorization();
            $url = $this->serverUrl.'api/all-data-company/'.$name;
            $result = $this->connect_api($url, $options);

            if($result == 'false'){
                $result = $this->msgDataNotFound;
            }

            return $result;
        }else{
            return $this->msgErrorAccessToken;
        }

    }

    // Get all modules of a company by passing the company name to search for, using the authentication token.
    public function get_all_modules_for_company($name)
    {
        if(isset($_COOKIE["accessToken"])){
            $options = $this->option_get_authorization();
            $url = $this->serverUrl.'api/all-modules-for-company/'.$name;
            $result = $this->connect_api($url, $options);

            if($result =='false'){
                $result = $this->msgDataNotFound;
            }

            return $result;
        }else{
            return $this->msgErrorAccessToken;
        }

    }

    // Get all plans of a module by passing the module name to search for, using the authentication token.
    public function get_all_plans_for_module($name)
    {
        if(isset($_COOKIE["accessToken"])){
            $options = $this->option_get_authorization();
            $url = $this->serverUrl.'api/all-plans-for-module/'.$name;
            $result = $this->connect_api($url, $options);

            if($result == 'false'){
                $result = $this->msgDataNotFound;
            }

            return $result;
        }else{
            return $this->msgErrorAccessToken;
        }

    }

    // Check if a company exists in the database
    public function company_exists($name)
    {
        if(isset($_COOKIE["accessToken"])){
            $options = $this->option_get_authorization();
            $url = $this->serverUrl.'api/company-exists/'.$name;
            $result = $this->connect_api($url, $options);

            if($result =='false'){
                $result = $this->msgDataNotFound;
            }

            return $result;
        }else{
            return $this->msgErrorAccessToken;
        }

    }

    // Remove the user's token
    public function logout()
    {
        if(isset($_COOKIE["accessToken"])){
            $post = array('email' => $this->username, 'password' => $this->password);
            $options = $this->option_post_logout();
            $url = $this->serverUrl.'api/logout';
            $result = $this->connect_api($url, $options);

            $result = $this->msgLogoutTokenUser;
            return $result;
        }else{
            return $this->msgErrorAccessToken;
        }

    }

    // Connect to the API by passing the URL and connection options
    protected function connect_api($url, $options){
        $curl = curl_init($url);
        curl_setopt_array($curl, $options);
        $resul = curl_exec($curl);
        curl_close($curl);

        if($resul !== false){
            return $resul;
        }else{
            return $this->msgErrorConnectAPI;
        }
    }

    // Define the connection options to the API with the POST method by passing the user data and password to receive the token.
    protected function option_post($post){
        $options[CURLOPT_HTTPHEADER] = array(
            'Content-Type: application/json'
        );
        $options[CURLOPT_POST] = true;
        $options[CURLOPT_POSTFIELDS] = $post;
        $options[CURLOPT_FOLLOWLOCATION] = true;
        $options[CURLOPT_RETURNTRANSFER] = true;
        return $options;
    }

    // Define the connection options to the API with the POST method to logout the user's token.
    protected function option_post_logout(){
        $options[CURLOPT_HTTPHEADER] = array(
            'Content-Type: application/json',
            'Authorization: Bearer '.$_COOKIE["accessToken"]
        );
        $options[CURLOPT_POST] = true;
        $options[CURLOPT_RETURNTRANSFER] = true;
        return $options;
    }

    // Define the connection options to the API with the GET method by passing the token in the request header.
    protected function option_get_authorization(){
        $options[CURLOPT_RETURNTRANSFER] = true;
        $options[CURLOPT_HTTPHEADER] = array(
            'Content-Type: application/json',
            'Authorization: Bearer '.$_COOKIE["accessToken"]
        );
        return $options;
    }
}
?>
